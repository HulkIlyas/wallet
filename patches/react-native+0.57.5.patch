patch-package
--- a/node_modules/react-native/local-cli/link/android/patches/makeBuildPatch.js
+++ b/node_modules/react-native/local-cli/link/android/patches/makeBuildPatch.js
@@ -12,12 +12,12 @@ const normalizeProjectName = require('./normalizeProjectName');
 module.exports = function makeBuildPatch(name) {
   const normalizedProjectName = normalizeProjectName(name);
   const installPattern = new RegExp(
-    `\\s{4}(compile)(\\(|\\s)(project)\\(\\\':${normalizedProjectName}\\\'\\)(\\)|\\s)`,
+    `\\s{4}(implementation)(\\(|\\s)(project)\\(\\\':${normalizedProjectName}\\\'\\)(\\)|\\s)`,
   );
 
   return {
     installPattern,
     pattern: /[^ \t]dependencies {(\r\n|\n)/,
-    patch: `    compile project(':${normalizedProjectName}')\n`,
+    patch: `    implementation project(':${normalizedProjectName}')\n`,
   };
 };
--- a/node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js
+++ b/node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js
@@ -39,7 +39,7 @@ function findMatchingSimulator(simulators, simulatorString) {
   var match;
   for (let version in devices) {
     // Making sure the version of the simulator is an iOS or tvOS (Removes Apple Watch, etc)
-    if (!version.startsWith('iOS') && !version.startsWith('tvOS')) {
+    if (!version.startsWith('com.apple.CoreSimulator.SimRuntime.iOS') && !version.startsWith('com.apple.CoreSimulator.SimRuntime.tvOS')) {
       continue;
     }
     if (simulatorVersion && !version.endsWith(simulatorVersion)) {
